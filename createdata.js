#!/usr/bin/env node

import pkg from 'pg';
const { Pool } = pkg;
import bcrypt from 'bcrypt';

async function createTestData() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL
  });

  try {
    console.log('üöÄ Creating test data...');

    // Hash the password
    const hashedPassword = bcrypt.hashSync('teacher', 10);

    // Create teacher user with instructor role
    const userResult = await pool.query(`
      INSERT INTO users (username, email, password, role)
      VALUES ($1, $2, $3, $4)
      ON CONFLICT (username) DO UPDATE SET
        email = EXCLUDED.email,
        password = EXCLUDED.password,
        role = EXCLUDED.role
      RETURNING id, username, role
    `, ['teacher', 'teacher@example.com', hashedPassword, 'instructor']);

    const teacherId = userResult.rows[0].id;
    console.log(`‚úÖ Created user: ${userResult.rows[0].username} (ID: ${teacherId}, role: ${userResult.rows[0].role})`);

    // Create test course
    const courseResult = await pool.query(`
      INSERT INTO courses (title, description, instructor_id, status, is_public, allow_registration)
      VALUES ($1, $2, $3, $4, $5, $6)
      ON CONFLICT DO NOTHING
      RETURNING id, title
    `, [
      'üéì Programming Fundamentals',
      'Complete course on programming fundamentals for beginners. Learn variables, loops, functions and object-oriented programming.',
      teacherId,
      'published',
      true,
      true
    ]);

    if (courseResult.rows.length > 0) {
      const courseId = courseResult.rows[0].id;
      console.log(`‚úÖ Created course: ${courseResult.rows[0].title} (ID: ${courseId})`);

      // Create course chapters
      const chapters = [
        { title: 'üìö Introduction to Programming', order: 1 },
        { title: 'üî§ Variables and Data Types', order: 2 },
        { title: 'üîÑ Loops and Conditions', order: 3 },
        { title: '‚öôÔ∏è Functions', order: 4 },
        { title: 'üèóÔ∏è Object-Oriented Programming', order: 5 }
      ];

      for (const chapter of chapters) {
        const chapterResult = await pool.query(`
          INSERT INTO chapters (title, course_id, order_index)
          VALUES ($1, $2, $3)
          ON CONFLICT DO NOTHING
          RETURNING id, title
        `, [chapter.title, courseId, chapter.order]);

        if (chapterResult.rows.length > 0) {
          const chapterId = chapterResult.rows[0].id;
          console.log(`  ‚úÖ Created chapter: ${chapterResult.rows[0].title}`);

          // Create lessons for each chapter
          const lessons = getLessonsForChapter(chapter.order);
          
          for (let i = 0; i < lessons.length; i++) {
            const lesson = lessons[i];
            const lessonResult = await pool.query(`
              INSERT INTO lessons (title, content, chapter_id, order_index)
              VALUES ($1, $2, $3, $4)
              ON CONFLICT DO NOTHING
              RETURNING id, title
            `, [lesson.title, lesson.content, chapterId, i + 1]);

            if (lessonResult.rows.length > 0) {
              console.log(`    ‚úÖ Created lesson: ${lessonResult.rows[0].title}`);
            }
          }
        }
      }
    } else {
      console.log('‚ÑπÔ∏è Course already exists, skipping creation');
    }

    console.log('üéâ Test data created successfully!');
    console.log('');
    console.log('üìã Login credentials:');
    console.log('   Username: teacher');
    console.log('   Password: teacher');
    console.log('   Role: instructor');

  } catch (error) {
    console.error('‚ùå Error creating test data:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

function getLessonsForChapter(chapterOrder) {
  const lessonsMap = {
    1: [ // Introduction to Programming
      {
        title: 'What is Programming?',
        content: '# What is Programming?\n\nProgramming is the process of creating instructions for a computer. In this lesson we will learn basic concepts and terminology.'
      },
      {
        title: 'History of Programming Languages',
        content: '# History of Programming Languages\n\nFrom machine code to modern high-level languages - a journey through programming history.'
      }
    ],
    2: [ // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
      {
        title: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: —á—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º –Ω—É–∂–Ω—ã',
        content: '# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n\n–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - —ç—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ò–∑—É—á–∏–º –∫–∞–∫ –∏—Ö —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.\n\n```javascript\nlet name = "–ò–≤–∞–Ω";\nlet age = 25;\nconsole.log(name, age);\n```'
      },
      {
        title: '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è',
        content: '# –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö\n\n–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:\n\n- **–ß–∏—Å–ª–∞**: 42, 3.14\n- **–°—Ç—Ä–æ–∫–∏**: "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"\n- **–ë—É–ª–µ–≤—ã**: true, false'
      }
    ],
    3: [ // –¶–∏–∫–ª—ã –∏ —É—Å–ª–æ–≤–∏—è
      {
        title: '–£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ if/else',
        content: '# –£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n–£—Å–ª–æ–≤–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è:\n\n```javascript\nif (age >= 18) {\n  console.log("–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π");\n} else {\n  console.log("–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π");\n}\n```'
      },
      {
        title: '–¶–∏–∫–ª—ã: for –∏ while',
        content: '# –¶–∏–∫–ª—ã\n\n–¶–∏–∫–ª—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∫–æ–¥:\n\n```javascript\n// –¶–∏–∫–ª for\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// –¶–∏–∫–ª while\nlet count = 0;\nwhile (count < 3) {\n  console.log(count);\n  count++;\n}\n```'
      }
    ],
    4: [ // –§—É–Ω–∫—Ü–∏–∏
      {
        title: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π',
        content: '# –§—É–Ω–∫—Ü–∏–∏\n\n–§—É–Ω–∫—Ü–∏–∏ - —ç—Ç–æ –±–ª–æ–∫–∏ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n```javascript\nfunction greet(name) {\n  return "–ü—Ä–∏–≤–µ—Ç, " + name + "!";\n}\n\nconsole.log(greet("–ê–Ω–Ω–∞"));\n```'
      },
      {
        title: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
        content: '# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n\n–§—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n```javascript\nfunction add(a, b) {\n  return a + b;\n}\n\nlet result = add(5, 3);\nconsole.log(result); // 8\n```'
      }
    ],
    5: [ // –û–û–ü
      {
        title: '–û—Å–Ω–æ–≤—ã –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
        content: '# –û–û–ü: –û—Å–Ω–æ–≤—ã\n\n–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–û–û–ü) - —ç—Ç–æ –ø–∞—Ä–∞–¥–∏–≥–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤.\n\n## –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:\n- –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è\n- –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n- –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º'
      },
      {
        title: '–ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã',
        content: '# –ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã\n\n–ö–ª–∞—Å—Å—ã - —ç—Ç–æ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  greet() {\n    return `–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ${this.name}`;\n  }\n}\n\nlet person = new Person("–ü–µ—Ç—Ä", 30);\nconsole.log(person.greet());\n```'
      }
    ]
  };

  return lessonsMap[chapterOrder] || [];
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
createTestData();