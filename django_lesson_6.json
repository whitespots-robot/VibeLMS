{
  "title": "Creating Your First View",
  "description": "Building views to handle HTTP requests and return responses",
  "chapterId": 4,
  "orderIndex": 1,
  "content": "<h2>Creating Your First View</h2><p>Views in Django are Python functions or classes that receive HTTP requests and return HTTP responses. Let's create views for our blog.</p><h3>Understanding Django Views</h3><p>Views contain the logic for your web application. They fetch data from models and pass it to templates for rendering.</p><h3>Function-Based Views</h3><p>Open <code>blog/views.py</code> and create your first view:</p><pre><code>from django.shortcuts import render, get_object_or_404\nfrom django.http import HttpResponse\nfrom .models import Post\n\ndef post_list(request):\n    posts = Post.objects.filter(status='published').order_by('-published_date')\n    return render(request, 'blog/post_list.html', {'posts': posts})\n\ndef post_detail(request, slug):\n    post = get_object_or_404(Post, slug=slug, status='published')\n    return render(request, 'blog/post_detail.html', {'post': post})\n\ndef about(request):\n    return render(request, 'blog/about.html')</code></pre><h3>View Components Explained</h3><ul><li><strong>request</strong> - HttpRequest object containing request data</li><li><strong>render()</strong> - Combines template with context data</li><li><strong>get_object_or_404()</strong> - Gets object or returns 404 error</li><li><strong>QuerySet</strong> - Database query results from models</li></ul><h3>Class-Based Views</h3><p>Django also supports class-based views for more complex functionality:</p><pre><code>from django.views.generic import ListView, DetailView\n\nclass PostListView(ListView):\n    model = Post\n    template_name = 'blog/post_list.html'\n    context_object_name = 'posts'\n    paginate_by = 5\n    \n    def get_queryset(self):\n        return Post.objects.filter(status='published').order_by('-published_date')\n\nclass PostDetailView(DetailView):\n    model = Post\n    template_name = 'blog/post_detail.html'\n    context_object_name = 'post'\n    slug_field = 'slug'\n    slug_url_kwarg = 'slug'\n    \n    def get_queryset(self):\n        return Post.objects.filter(status='published')</code></pre><h3>Context Data</h3><p>Context is a dictionary containing data passed to templates:</p><pre><code>def post_list(request):\n    posts = Post.objects.filter(status='published')\n    recent_posts = Post.objects.filter(status='published')[:3]\n    \n    context = {\n        'posts': posts,\n        'recent_posts': recent_posts,\n        'title': 'Latest Blog Posts'\n    }\n    \n    return render(request, 'blog/post_list.html', context)</code></pre><h3>HTTP Methods</h3><p>Handle different HTTP methods in your views:</p><pre><code>from django.views.decorators.http import require_http_methods\n\n@require_http_methods([\"GET\", \"POST\"])\ndef contact(request):\n    if request.method == 'POST':\n        # Handle form submission\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        # Process the form data\n        return render(request, 'blog/contact_success.html')\n    else:\n        # Display the form\n        return render(request, 'blog/contact.html')</code></pre>",
  "codeExample": "# blog/views.py\nfrom django.shortcuts import render, get_object_or_404\nfrom django.views.generic import ListView, DetailView\nfrom .models import Post\n\ndef post_list(request):\n    posts = Post.objects.filter(status='published').order_by('-published_date')\n    return render(request, 'blog/post_list.html', {'posts': posts})\n\ndef post_detail(request, slug):\n    post = get_object_or_404(Post, slug=slug, status='published')\n    return render(request, 'blog/post_detail.html', {'post': post})\n\nclass PostListView(ListView):\n    model = Post\n    template_name = 'blog/post_list.html'\n    context_object_name = 'posts'\n    paginate_by = 5\n    \n    def get_queryset(self):\n        return Post.objects.filter(status='published').order_by('-published_date')",
  "codeLanguage": "python"
}