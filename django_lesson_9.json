{
  "title": "Django Forms and User Input",
  "description": "Creating and handling forms for user registration, login, and blog post creation",
  "chapterId": 6,
  "orderIndex": 1,
  "content": "<h2>Django Forms and User Input</h2><p>Forms are essential for user interaction. Django provides a powerful forms framework for handling user input safely.</p><h3>Creating Model Forms</h3><p>Create <code>blog/forms.py</code>:</p><pre><code>from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\nfrom .models import Post\n\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'slug', 'content', 'status']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'slug': forms.TextInput(attrs={'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'class': 'form-control', 'rows': 10}),\n            'status': forms.Select(attrs={'class': 'form-control'})\n        }\n        \n    def clean_slug(self):\n        slug = self.cleaned_data['slug']\n        if Post.objects.filter(slug=slug).exclude(pk=self.instance.pk).exists():\n            raise forms.ValidationError('Slug already exists')\n        return slug\n\nclass CustomUserCreationForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n    first_name = forms.CharField(max_length=30)\n    last_name = forms.CharField(max_length=30)\n    \n    class Meta:\n        model = User\n        fields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2')\n        \n    def save(self, commit=True):\n        user = super().save(commit=False)\n        user.email = self.cleaned_data['email']\n        user.first_name = self.cleaned_data['first_name']\n        user.last_name = self.cleaned_data['last_name']\n        if commit:\n            user.save()\n        return user\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100, widget=forms.TextInput(attrs={'class': 'form-control'}))\n    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control'}))\n    subject = forms.CharField(max_length=200, widget=forms.TextInput(attrs={'class': 'form-control'}))\n    message = forms.CharField(widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 5}))\n    \n    def clean_email(self):\n        email = self.cleaned_data['email']\n        if not email.endswith('@example.com'):\n            # Custom validation example\n            pass\n        return email</code></pre><h3>Form Views</h3><p>Add form handling views to <code>blog/views.py</code>:</p><pre><code>from django.shortcuts import render, redirect\nfrom django.contrib.auth import login\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .forms import PostForm, CustomUserCreationForm, ContactForm\n\n@login_required\ndef create_post(request):\n    if request.method == 'POST':\n        form = PostForm(request.POST)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.author = request.user\n            post.save()\n            messages.success(request, 'Post created successfully!')\n            return redirect('blog:post_detail', slug=post.slug)\n    else:\n        form = PostForm()\n    return render(request, 'blog/create_post.html', {'form': form})\n\n@login_required\ndef edit_post(request, slug):\n    post = get_object_or_404(Post, slug=slug, author=request.user)\n    if request.method == 'POST':\n        form = PostForm(request.POST, instance=post)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Post updated successfully!')\n            return redirect('blog:post_detail', slug=post.slug)\n    else:\n        form = PostForm(instance=post)\n    return render(request, 'blog/edit_post.html', {'form': form, 'post': post})\n\ndef register(request):\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            messages.success(request, 'Registration successful!')\n            return redirect('blog:post_list')\n    else:\n        form = CustomUserCreationForm()\n    return render(request, 'registration/register.html', {'form': form})\n\ndef contact(request):\n    if request.method == 'POST':\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            # Process form data\n            name = form.cleaned_data['name']\n            email = form.cleaned_data['email']\n            subject = form.cleaned_data['subject']\n            message = form.cleaned_data['message']\n            \n            # Send email or save to database\n            messages.success(request, 'Message sent successfully!')\n            return redirect('blog:contact')\n    else:\n        form = ContactForm()\n    return render(request, 'blog/contact.html', {'form': form})</code></pre><h3>Form Templates</h3><p>Create form templates with Bootstrap styling:</p><pre><code><!-- blog/templates/blog/create_post.html -->\n{% extends 'blog/base.html' %}\n\n{% block title %}Create Post - My Blog{% endblock %}\n\n{% block content %}\n<div class=\"row\">\n    <div class=\"col-md-8\">\n        <h2>Create New Post</h2>\n        \n        <form method=\"post\">\n            {% csrf_token %}\n            \n            <div class=\"mb-3\">\n                <label for=\"{{ form.title.id_for_label }}\" class=\"form-label\">Title</label>\n                {{ form.title }}\n                {% if form.title.errors %}\n                    <div class=\"text-danger\">{{ form.title.errors }}</div>\n                {% endif %}\n            </div>\n            \n            <div class=\"mb-3\">\n                <label for=\"{{ form.slug.id_for_label }}\" class=\"form-label\">Slug</label>\n                {{ form.slug }}\n                {% if form.slug.errors %}\n                    <div class=\"text-danger\">{{ form.slug.errors }}</div>\n                {% endif %}\n            </div>\n            \n            <div class=\"mb-3\">\n                <label for=\"{{ form.content.id_for_label }}\" class=\"form-label\">Content</label>\n                {{ form.content }}\n                {% if form.content.errors %}\n                    <div class=\"text-danger\">{{ form.content.errors }}</div>\n                {% endif %}\n            </div>\n            \n            <div class=\"mb-3\">\n                <label for=\"{{ form.status.id_for_label }}\" class=\"form-label\">Status</label>\n                {{ form.status }}\n                {% if form.status.errors %}\n                    <div class=\"text-danger\">{{ form.status.errors }}</div>\n                {% endif %}\n            </div>\n            \n            <button type=\"submit\" class=\"btn btn-primary\">Create Post</button>\n            <a href=\"{% url 'blog:post_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n</div>\n{% endblock %}</code></pre><h3>Form Validation</h3><p>Django forms provide automatic validation and custom validation methods:</p><ul><li><strong>Field validation</strong> - Built-in validators for common data types</li><li><strong>Custom validation</strong> - clean_fieldname() methods for field-specific validation</li><li><strong>Form validation</strong> - clean() method for cross-field validation</li><li><strong>CSRF protection</strong> - Automatic protection against cross-site request forgery</li></ul>",
  "codeExample": "# blog/forms.py\nfrom django import forms\nfrom .models import Post\n\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'slug', 'content', 'status']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'slug': forms.TextInput(attrs={'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'class': 'form-control', 'rows': 10}),\n            'status': forms.Select(attrs={'class': 'form-control'})\n        }\n        \n    def clean_slug(self):\n        slug = self.cleaned_data['slug']\n        if Post.objects.filter(slug=slug).exclude(pk=self.instance.pk).exists():\n            raise forms.ValidationError('Slug already exists')\n        return slug",
  "codeLanguage": "python"
}