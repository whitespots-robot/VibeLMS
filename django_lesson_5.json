{
  "title": "Migrations and Database Operations",
  "description": "Creating and applying migrations to set up your database schema",
  "chapterId": 3,
  "orderIndex": 2,
  "content": "<h2>Migrations and Database Operations</h2><p>After creating models, you need to create and apply migrations to update your database schema.</p><h3>What are Migrations?</h3><p>Migrations are Django's way of propagating changes you make to your models into your database schema. They're designed to be mostly automatic.</p><h3>Creating Your First Migration</h3><p>After adding the Post model, create a migration:</p><pre><code>python manage.py makemigrations blog</code></pre><p>You'll see output like:</p><pre><code>Migrations for 'blog':\n  blog/migrations/0001_initial.py\n    - Create model Post</code></pre><h3>Applying Migrations</h3><p>Apply the migration to create the database table:</p><pre><code>python manage.py migrate</code></pre><h3>Understanding Migration Files</h3><p>Django creates migration files in <code>blog/migrations/</code>. These files contain instructions for database changes:</p><pre><code># Generated migration file\nfrom django.db import migrations, models\nimport django.utils.timezone\n\nclass Migration(migrations.Migration):\n    initial = True\n    \n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    \n    operations = [\n        migrations.CreateModel(\n            name='Post',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('slug', models.SlugField(max_length=200, unique=True)),\n                ('content', models.TextField()),\n                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),\n                ('published_date', models.DateTimeField(blank=True, null=True)),\n                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=10)),\n                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to='auth.user')),\n            ],\n            options={\n                'ordering': ['-created_date'],\n            },\n        ),\n    ]</code></pre><h3>Database Shell</h3><p>Test your model in Django shell:</p><pre><code>python manage.py shell</code></pre><p>In the shell:</p><pre><code>from blog.models import Post\nfrom django.contrib.auth.models import User\n\n# Create a user (if you haven't already)\nuser = User.objects.create_user('admin', 'admin@example.com', 'password')\n\n# Create a post\npost = Post.objects.create(\n    title='My First Post',\n    slug='my-first-post',\n    author=user,\n    content='This is my first blog post!'\n)\n\n# Query posts\nPost.objects.all()\nPost.objects.filter(status='draft')</code></pre><h3>Migration Best Practices</h3><ul><li>Always create migrations after model changes</li><li>Review migration files before applying</li><li>Don't edit migration files manually unless necessary</li><li>Keep migrations small and focused</li></ul>",
  "codeExample": "# Create and apply migrations\npython manage.py makemigrations blog\npython manage.py migrate\n\n# Test in shell\npython manage.py shell\n\n# Shell commands:\nfrom blog.models import Post\nfrom django.contrib.auth.models import User\n\n# Create superuser for admin\npython manage.py createsuperuser\n\n# Check migration status\npython manage.py showmigrations",
  "codeLanguage": "bash"
}